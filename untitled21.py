# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Y1gUhOihwY6UQyOV3nWj6tAfbVtocB9
"""

class SimpleFinanceChatbot:
    def _init_(self):
        print("Loading chatbot model, please wait...")
        try:
            # device=-1 forces CPU, change to 0 if you want GPU and have one
            self.bot = pipeline("conversational", model="microsoft/DialoGPT-medium", device=-1)
        except Exception as e:
            print(f"Error loading model: {e}")
            self.bot = None

        self.conversation = None

        # Basic intent keywords and related tips
        self.tips = {
            "budget": "Creating a budget helps you control your spending and save money.",
            "saving": "Try to save at least 20% of your income for emergencies and goals.",
            "investment": "Diversify your investments to reduce risk and maximize returns.",
            "debt": "Focus on paying off high-interest debt first to save money.",
            "loan": "Always compare interest rates before taking a loan.",
            "retirement": "Start saving early for retirement to benefit from compound interest.",
            "expense": "Track your daily expenses to find areas where you can cut back.",
            "credit": "Pay your bills on time to maintain a good credit score.",
        }

    def detect_intent(self, user_input):
        user_input = user_input.lower()
        for keyword in self.tips.keys():
            if keyword in user_input:
                return keyword
        return None

    def get_tip(self, intent):
        return self.tips.get(intent, "I'm here to help with your personal finance questions!")

    def chat(self, user_input):
        user_input = user_input.strip()
        if not user_input:
            return "Please say something so I can help you."

        intent = self.detect_intent(user_input)
        if intent:
            # Return a finance tip if intent detected
            return self.get_tip(intent)

        if not self.bot:
            # If model failed to load, fallback message
            return "Sorry, the chatbot model is not available right now."

        # Use conversational model
        try:
            if self.conversation is None:
                self.conversation = Conversation(user_input)
            else:
                self.conversation.add_user_input(user_input)

            result = self.bot(self.conversation)

            # Defensive check for generated responses
            if result and hasattr(result, "generated_responses") and result.generated_responses:
                return result.generated_responses[-1]
            else:
                return "I'm not sure how to respond to that. Could you please rephrase?"

        except Exception as e:
            return f"Oops, something went wrong in generating a response: {e}"

def main():
    print("Welcome to Simple Personal Finance Chatbot!")
    print("Ask me about budgeting, saving, investing, loans, or general finance tips.")
    print("Type 'exit' to quit.\n")

    chatbot = SimpleFinanceChatbot()

    while True:
        try:
            user_input = input("You: ")
        except KeyboardInterrupt:
            print("\nChatbot: Goodbye! Take care of your finances!")
            break

        if user_input.lower() in ['exit', 'quit', 'bye']:
            print("Chatbot: Thanks for chatting! Take care of your finances!")
            break

        response = chatbot.chat(user_input)
        printf(f"chatbot:response")

       if _name_=="main_":
        main()